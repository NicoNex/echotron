package main

import (
	"errors"
	"fmt"

	"github.com/NicoNex/echotron/v3"
)

var ErrInvalidAPIResponse = errors.New("invalid API response object")

// APIError is an error generated by a Telegram resonse
type APIError struct {
	code int
	desc string
}

// NewAPIError creates a new NewAPIError with given errorCode and description
func NewAPIError(errorCode int, description string) APIError {
	return APIError{code: errorCode, desc: description}
}

// Code returns the error-code status of the error
func (a APIError) Code() int {
	return a.code
}

// Desc return the description of the error
func (a APIError) Desc() string {
	return a.desc
}

// Error returns a complete error description
// thanks to this method ResponseError can be used as an error interface
func (a APIError) Error() string {
	return fmt.Sprint("api error, code ", a.code, ", description ", a.desc)
}

// CheckResponseBase transform an error and an API response object into a *ResponseError (error interface)
// The only valid API response object types are the followings, if a different
// one is provided the error will be of type ErrInvalidAPIResponse.
// - APIResponseAdministrators
// - APIResponseBase
// - APIResponseBool
// - APIResponseChat
// - APIResponseChatMember
// - APIResponseCommands
// - APIResponseFile
// - APIResponseGameHighScore
// - APIResponseInteger
// - APIResponseInviteLink
// - APIResponseMessage
// - APIResponseMessageArray
// - APIResponseMessageID
// - APIResponsePoll
// - APIResponseStickerSet
// - APIResponseString
// - APIResponseUpdate
// - APIResponseUser
// - APIResponseUserProfile
// - APIResponseWebhook
func Check(APIResponse interface{}, err error) error {
	if err != nil {
		return err
	}

	var base echotron.APIResponseBase
	switch res := APIResponse.(type) {
	case echotron.APIResponseAdministrators:
		base = res.APIResponseBase
	case echotron.APIResponseBase:
		base = res
	case echotron.APIResponseBool:
		base = res.APIResponseBase
	case echotron.APIResponseChat:
		base = res.APIResponseBase
	case echotron.APIResponseChatMember:
		base = res.APIResponseBase
	case echotron.APIResponseCommands:
		base = res.APIResponseBase
	case echotron.APIResponseFile:
		base = res.APIResponseBase
	case echotron.APIResponseGameHighScore:
		base = res.APIResponseBase
	case echotron.APIResponseInteger:
		base = res.APIResponseBase
	case echotron.APIResponseInviteLink:
		base = res.APIResponseBase
	case echotron.APIResponseMessage:
		base = res.APIResponseBase
	case echotron.APIResponseMessageArray:
		base = res.APIResponseBase
	case echotron.APIResponseMessageID:
		base = res.APIResponseBase
	case echotron.APIResponsePoll:
		base = res.APIResponseBase
	case echotron.APIResponseStickerSet:
		base = res.APIResponseBase
	case echotron.APIResponseString:
		base = res.APIResponseBase
	case echotron.APIResponseUpdate:
		base = res.APIResponseBase
	case echotron.APIResponseUser:
		base = res.APIResponseBase
	case echotron.APIResponseUserProfile:
		base = res.APIResponseBase
	case echotron.APIResponseWebhook:
		base = res.APIResponseBase
	default:
		return ErrInvalidAPIResponse
	}

	if !base.Ok {
		return NewAPIError(base.ErrorCode, base.Description)
	}

	return nil
}
